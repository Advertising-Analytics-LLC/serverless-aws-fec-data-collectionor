# serverless.yml
# see https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
# attributes are alphabetized, except for identifiers/names which come first

service: serverless-aws-python3-fec-datasync
app: fec-datasync
frameworkVersion: ">=2.0.0 <3.0.0"

# Custom variables
custom:
  backfill: 0
  loader_concurrency: 1
  pythonRequirements:
    dockerizePip: false
  dev:
    API_KEY: /global/openfec-api/api_key
    deploymentBucketName: ${cf:fec-datasync-resources.DeploymentBucketName} #serverless-deploymentbucket-us-east-1-648881544937
    LOG_LEVEL: DEBUG
    candidate_sync_queue_arn: ${cf:fec-datasync-resources.CandidateSyncQueueArn}
    candidate_sync_queue_name: ${cf:fec-datasync-resources.CandidateSyncQueueName}
    copy_from_bucket_arn: ${cf:fec-datasync-resources.CopyFromBucketArn}
    copy_from_bucket_name: ${cf:fec-datasync-resources.CopyFromBucketName}
    REDSHIFT_COPY_ROLE: arn:aws:iam::648881544937:role/copyFromRedshiftRole
    filing_se_sqs_arn: ${cf:fec-datasync-resources.FilingSEQueueArn}
    filing_se_sqs_name: ${cf:fec-datasync-resources.FilingSEQueueName}
    rss_sns_topic_arn: ${cf:fec-datasync-resources.RSSFeedTopicArn}
    financial_summary_sqs_arn: ${cf:fec-datasync-resources.FinancialSummaryQueueArn}
    financial_summary_sqs_name: ${cf:fec-datasync-resources.FinancialSummaryQueueName}
    filing_sb_sqs_arn: ${cf:fec-datasync-resources.FilingSBQueueArn}
    filing_sb_sqs_name: ${cf:fec-datasync-resources.FilingSBQueueName}
    committeesync_sqs_name: ${cf:fec-datasync-resources.CommitteeSyncQueueName}
    committeesync_sqs_arn: ${cf:fec-datasync-resources.CommitteeSyncQueueArn}
    filing_f1s_sqs_name: ${cf:fec-datasync-resources.FilingF1SQueueName}
    filing_f1s_sqs_arn: ${cf:fec-datasync-resources.FilingF1SQueueArn}


# The lambda function(s) defined in this serverless config
# nested interpolation allows for stage-specific references
functions:

  GetDBStats:
    handler: src/get_db_stats.lambdaHandler
    reservedConcurrency: 1
    timeout: 30
    environment:
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
    events:
      - schedule: rate(60 minutes)

  CandidateSync:
    description: Polls OpenFEC API (once) for candidates that have filed recently and sends the IDs to SQS
    handler: src/CandidateSync.lambdaHandler
    reservedConcurrency: 1
    timeout: 30
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.candidate_sync_queue_name}
    events:
      - schedule: cron(0 4 * * ? *)

  CandidateBackfill:
    description: Backfills candidates queue
    handler: src/CandidateSync.lambdaBackfillHandler
    reservedConcurrency: ${self:custom.backfill}
    timeout: 90
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.candidate_sync_queue_name}
    events:
      - schedule: rate(1 minute)

  CandidateLoader:
    description: Triggered by SQS it recieves Messages and writes candidate data to the DB
    handler: src/CandidateLoader.lambdaHandler
    reservedConcurrency: ${self:custom.loader_concurrency}
    timeout: 30
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.candidate_sync_queue_name}
    events:
      - sqs: "${self:custom.${self:provider.stage}.candidate_sync_queue_arn}"

  CommitteeSync:
    description: Polls OpenFEC API (once) for committees that have filed recently and sends the IDs to SQS
    handler: src/CommitteSync.committeSync
    reservedConcurrency: 1
    timeout: 30
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.committeesync_sqs_name}
    events:
      - schedule: cron(0 0 * * ? *)

  CommitteeBackfill:
    description: Backfills committee sync queue
    handler: src/CommitteSync.lambdaBackfillHandler
    reservedConcurrency: ${self:custom.backfill}
    timeout: 90
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.committeesync_sqs_name}
    events:
      - schedule: rate(1 minute)

  CommitteeLoader:
    description: Recieves committee Ids from SQS, queries api for committee info, updates DB
    handler: src/CommitteLoader.committeLoader
    reservedConcurrency: ${self:custom.loader_concurrency}
    timeout: 1200
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.committeesync_sqs_name}
    events:
      - sqs:
        arn: "${self:custom.${self:provider.stage}.committeesync_sqs_arn}"
        batchSize: 1

  FilingSync:
    description: Scrapes FEC RSS feed for recent filings, pushes the new filings to SNS and SQS
    handler: src/FilingSync.lambdaHandler
    reservedConcurrency: 1
    timeout: 180
    environment:
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      RSS_SNS_TOPIC_ARN: "${self:custom.${self:provider.stage}.rss_sns_topic_arn}"
    events:
      - schedule: cron(0 0 * * ? *)

  FilingBackfill:
    description: Crawls back in time over filings
    handler: src/FilingSync.lambdaBackfillHandler
    reservedConcurrency: ${self:custom.backfill}
    timeout: 900
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      RSS_SNS_TOPIC_ARN: "${self:custom.${self:provider.stage}.rss_sns_topic_arn}"
    events:
      - schedule: rate(1 minute)

  FinancialSummaryLoader:
    description: Takes new filings from SQS, queries api, writes to DB
    handler: src/FinancialSummaryLoader.lambdaHandler
    reservedConcurrency: ${self:custom.loader_concurrency}
    timeout: 900
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.financial_summary_sqs_name}
    events:
      - sqs:
        arn: "${self:custom.${self:provider.stage}.financial_summary_sqs_arn}"
        batchSize: 1

  FECFileLoaderSB:
    description: Gets FEC file url from SQS, downloads, parses for Schedule B filings, loads into DB
    handler: src/FECFileLoader.lambdaHandler
    memorySize: 3008
    reservedConcurrency: ${self:custom.loader_concurrency}
    timeout: 900
    environment:
      FILING_TYPE: 'SB'
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      REDSHIFT_COPY_ROLE: ${self:custom.${self:provider.stage}.REDSHIFT_COPY_ROLE}
      S3_BUCKET_NAME: ${self:custom.${self:provider.stage}.copy_from_bucket_name}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.filing_sb_sqs_name}
    events:
      - sqs:
        arn: "${self:custom.${self:provider.stage}.filing_sb_sqs_arn}"
        batchSize: 1

  FECFileLoaderSE:
    description: Gets FEC file url from SQS, downloads, parses for Schedule E filings, loads into DB
    handler: src/FECFileLoader.lambdaHandler
    memorySize: 3008
    reservedConcurrency: ${self:custom.loader_concurrency}
    timeout: 900
    environment:
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      REDSHIFT_COPY_ROLE: ${self:custom.${self:provider.stage}.REDSHIFT_COPY_ROLE}
      S3_BUCKET_NAME: ${self:custom.${self:provider.stage}.copy_from_bucket_name}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.filing_se_sqs_name}
      FILING_TYPE: 'SE'
    events:
      - sqs:
        arn: "${self:custom.${self:provider.stage}.filing_se_sqs_arn}"
        batchSize: 1

  FECFileLoaderSupp:
    description: Gets FEC file url from SQS, downloads, parses for Form 1 Supplemental Data, loads into DB
    handler: src/FECFileLoader.lambdaHandler
    memorySize: 3008
    reservedConcurrency: ${self:custom.loader_concurrency}
    timeout: 900
    environment:
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      REDSHIFT_COPY_ROLE: ${self:custom.${self:provider.stage}.REDSHIFT_COPY_ROLE}
      S3_BUCKET_NAME: ${self:custom.${self:provider.stage}.copy_from_bucket_name}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.filing_f1s_sqs_name}
      FILING_TYPE: 'F1S'
    events:
      - sqs:
        arn: "${self:custom.${self:provider.stage}.filing_f1s_sqs_arn}"
        batchSize: 1

# packaging instructuions, and ignore list
package:
  exclude:
    - .env
    - .git/**
    - .gitignore
    - .pre-commit-config.yaml
    - .pytest_cache/**
    - .serverless/**
    - .python-version
    - .venv
    - .vscode/**
    - bin/**
    - dev-requirements.txt
    - docs/**
    - Makefile
    - mkdocs.yml
    - node_modules/**
    - package.json
    - package-lock.json
    - prerequisite-cloudformation-resources.yml
    - pytest.ini
    - README.md
    - requirements.txt
    - serverless.yml
    - site/**
    - sql/**
    - tests/**
    - tmp/**

plugins:
  - serverless-plugin-diff
  - serverless-python-requirements

# Cloud Provider config
provider:
  name: aws
  deploymentPrefix: ${self:service}
  logRetentionInDays: 14
  region: ${opt:region, 'us-east-1'}
  runtime: python3.7
  stage: ${opt:stage,'dev'}

  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 10
    name: ${self:custom.${self:provider.stage}.deploymentBucketName}
    serverSideEncryption: AES256

  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:DescribeParameters
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter${self:custom.${self:provider.stage}.API_KEY}"
        - Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/global/fec-schema/*"
    - Effect: "Allow"
      Action:
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:SendMessage
      Resource:
        - "${self:custom.${self:provider.stage}.candidate_sync_queue_arn}"
        - "${self:custom.${self:provider.stage}.filing_sb_sqs_arn}"
        - "${self:custom.${self:provider.stage}.financial_summary_sqs_arn}"
        - "${self:custom.${self:provider.stage}.filing_se_sqs_arn}"
        - "${self:custom.${self:provider.stage}.committeesync_sqs_arn}"
        - "${self:custom.${self:provider.stage}.filing_f1s_sqs_arn}"
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource:
        - "${self:custom.${self:provider.stage}.rss_sns_topic_arn}"
    - Effect: "Allow"
      Action:
        - s3:DeleteObject
        - s3:GetObject
        - s3:ListBucket
        - s3:PutObject
      Resource:
        - "${self:custom.${self:provider.stage}.copy_from_bucket_arn}"
        - "${self:custom.${self:provider.stage}.copy_from_bucket_arn}/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "*"
  tags:
    serverless_managed: true
    serverless_name: ${self:service}
    Owner: Rhythmic Engineering
    Namespace: aws-AdvertisingAnalytics
    Env: ${self:provider.stage}
  # tracing:
  #   lambda: true

resources:
  Resources:
    Dashboard:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        DashboardBody: ${file(my-dashboard-body.js):myDashboardBody}
        DashboardName: ${self:service}-dashboard

outputs:
  MonitoringDashboard: https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=${self:service}-dashboard
