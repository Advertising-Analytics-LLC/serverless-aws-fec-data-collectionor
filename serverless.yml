# serverless.yml
# see https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
# attributes are alphabetized, except for identifiers/names which come first

service: serverless-aws-python3-fec-datasync
app: fec-datasync
frameworkVersion: ">=1.73.0 <2.0.0"

# Custom variables
custom:
  Version: ${cf:fec-datasync-resources.Version}
  pythonRequirements:
    dockerizePip: false
  dev:
    API_KEY: /global/openfec-api/api_key
    deploymentBucketName: ${cf:fec-datasync-resources.DeploymentBucketName} #serverless-deploymentbucket-us-east-1-648881544937
    LOG_LEVEL: DEBUG
    rss_sns_topic_arn: ${cf:fec-datasync-resources.RSSFeedTopicArn}
    rss_sqs_queue_arn: ${cf:fec-datasync-resources.NewFilingQueueArn}
    rss_sqs_queue_name: ${cf:fec-datasync-resources.NewFilingQueueName}
    SQS_QUEUE_NAME: ${cf:fec-datasync-resources.CommitteeSyncQueueName}
    SQS_QUEUE_ARN: ${cf:fec-datasync-resources.CommitteeSyncQueueArn}


# The lambda function(s) defined in this serverless config
# nested interpolation allows for stage-specific references
functions:

  CommitteeSync:
    handler: src/CommitteSync.committeSync
    timeout: 30
    reservedConcurrency: 2
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.SQS_QUEUE_NAME}
    events:
      - schedule: cron(0 0,8,16 * * ? *)

  CommitteeLoader:
    handler: src/CommitteLoader.committeLoader
    timeout: 30
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.SQS_QUEUE_NAME}
    events:
      - sqs: "${self:custom.${self:provider.stage}.SQS_QUEUE_ARN}"

  FilingSync:
    handler: src/FilingSync.lambdaHandler
    timeout: 180
    environment:
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      RSS_SNS_TOPIC_ARN: "${self:custom.${self:provider.stage}.rss_sns_topic_arn}"
    events:
      - schedule: cron(0 0,8,16 * * ? *)

  FinancialSummaryLoader:
    handler: src/FinancialSummaryLoader.lambdaHandler
    reservedConcurrency: 2
    timeout: 60
    environment:
      API_KEY: ${self:custom.${self:provider.stage}.API_KEY}
      LOG_LEVEL: ${self:custom.${self:provider.stage}.LOG_LEVEL}
      SQS_QUEUE_NAME: ${self:custom.${self:provider.stage}.rss_sqs_queue_name}
    events:
      - sqs: "${self:custom.${self:provider.stage}.rss_sqs_queue_arn}"

# packaging instructuions, and ignore list
package:
  exclude:
    - .env
    - .venv
    - .vscode
    - .git/**
    - .gitignore
    - .pytest_cache
    - node_modules/**
    - package.json
    - package-lock.json
    - prerequisite-cloudformation-resources.yml
    - README.md
    - requirements.txt
    - tmp

# plugin to package dependencies
plugins:
  - serverless-python-requirements

# Cloud Provider config
provider:
  name: aws
  deploymentPrefix: ${self:service}
  logRetentionInDays: 14
  region: ${opt:region, 'us-east-1'}
  runtime: python3.7
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 10
    name: ${self:custom.${self:provider.stage}.deploymentBucketName}
    serverSideEncryption: AES256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:DescribeParameters
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter${self:custom.${self:provider.stage}.API_KEY}"
        - Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":parameter/global/fec-schema/*"
    - Effect: "Allow"
      Action:
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:SendMessage
      Resource:
        - "${self:custom.${self:provider.stage}.rss_sqs_queue_arn}"
        - "${self:custom.${self:provider.stage}.SQS_QUEUE_ARN}"
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource:
        - "${self:custom.${self:provider.stage}.rss_sns_topic_arn}"
  tags:
    serverless_managed: true
    serverless_name: ${self:service}
    Owner: Rhythmic Engineering
    Namespace: aws-AdvertisingAnalytics
    Env: ${self:provider.stage}
    git_description: ${self:custom.Version}

# TODO: add cfn role
# see https://www.albertgao.xyz/2020/02/26/how-to-resolve-require-the-cfnrole-option-warning-for-serverless-framework/
#  cfnRole: arn:aws:iam::XXXXXX:role/role

# TODO: integrate serverless and cfn rsc deploys?
# you can add CloudFormation resource templates here
# resources:
#  - ${file(cfn_resources/deploymentBucket.yml)}
#  - ${file(cfn_resources/sqsQueue.yml)}
